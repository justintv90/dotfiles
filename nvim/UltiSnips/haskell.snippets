snippet t3 "type signature len 3" b
$1 :: ${2:Double} -> ${3:$2} -> ${4:$3}
endsnippet


snippet t4 "type signature len 3" b
$1 :: ${2:Double} -> ${3:$2} -> ${4:$3} -> ${5:$4}
endsnippet

snippet t5 "type signature len 3" b
$1 :: ${2:Double} -> ${3:$2} -> ${4:$3} -> ${5:$4} -> ${6:$5}
endsnippet

snippet t6 "type signature len 3" b
$1 :: ${2:Double} -> ${3:$2} -> ${4:$3} -> ${5:$4} -> ${6:$5} -> ${7:$6}
endsnippet

snippet ife "if ... then ... else ..."
if ${1:condition}
	then ${2:expression}
	else ${3:expression}
endsnippet

snippet case "case ... of ..."
case ${1:binding} of
	${2:expr val} -> ${3}
	${4:expr val} -> ${5}
endsnippet

snippet ts "Type signature"
${1:name} :: ${2:Type} -> ${3:$2}
endsnippet

snippet tc "Type constraint"
(${1:Class} ${2:Type}) => ${3:$2}
endsnippet

snippet n "Function definition"
${1:name} :: ${2:Type} -> ${3:$2}
$1 ${4:x} =  ${5:error "undefined: \`$1' in `!v expand('%')`"}
endsnippet

snippet nn "Function definition with type constraint"
${1:name} :: ${2:Type} => ${3:Type} -> ${4: Type}
endsnippet


snippet p "pattern match funcitno"
${1:name} :: ${2:Type} -> ${3:$2}
$1 ${4:} = ${5:}
$1 ${6:} = ${7:}
$1 ${8:} = ${9:}
endsnippet


snippet fg "function with guards" 
$1 :: (${2:Class} ${3:type}) => ${4:$3} -> ${5:$4}
$1 ${6:x}
	| ${7: predicate} = ${8:undefined}
endsnippet

snippet fl "Function definition for list patterns"
${1:name} :: [${2:Type}] -> ${3:Type}
$1 [] = ${4:undefined}
$1 ${5:(x:xs)} = ${6:undefined}
endsnippet

snippet fc "Function clause"
${1:name} ${2:pattern} = ${3:undefined}
endsnippet

snippet 2fc "Function clause"
${1:name} ${2:pattern} = ${3:undefined}
$1 ${4:pattern} = ${5:undefined}
endsnippet

snippet 3fc "Function clause"
${1:name} ${2:pattern} = ${3:undefined}
$1 ${4:pattern} = ${5:undefined}
$1 ${6:pattern} = ${7:undefined}
endsnippet

snippet g "Guard"
| ${1:predicate} = ${2:undefined}
endsnippet

snippet la "Lambda expression"
\ ${1:pattern} -> ${2:expression}
endsnippet

snippet lc "List comprehension"
[${3:foo $1} | ${1:x} <- ${2:xs} ]
endsnippet

snippet let "let ... in ..."
let ${1:name} = ${2:expression}
in ${3:expression}
endsnippet


# vim: foldmethod=marker

# Pragmas {{{
snippet lang "LANGUAGE pragma" !b
{-# LANGUAGE $1 #-}
endsnippet


snippet trhsx "HSP/HSX Preprocessor (trhsx)" !b
{-# OPTIONS_GHC -F -pgmF trhsx #-}
endsnippet

snippet hsx "HSP/HSX Preprocessor (hsx2hs)" !b
{-# OPTIONS_GHC -F -pgmF hsx2hs #-}
endsnippet

snippet inline "INLINE pragma" !b
{-# INLINE ${1:name} #-}
endsnippet

snippet inlinable "INLINABLE pragma" !b
{-# INLINABLE ${1:name} #-}
endsnippet

snippet noinline "NOINLINE pragma" !b
{-# NOINLINE ${1:name} #-}
endsnippet

snippet specialize "SPECIALIZE pragma" !b
{-# SPECIALIZE ${1:name} :: ${2:type} #-}
endsnippet

snippet rules "RULES pragma" !b
{-# RULES "${1:name}" ${2:rule} #-}
endsnippet

snippet unpack "UNPACK pragma" !w
{-# UNPACK #-}
endsnippet

snippet nounpack "NOUNPACK pragma" !w
{-# NOUNPACK #-}
endsnippet

# }}} Pragmas

# Statements {{{

global !p
def last_module(mod):
	return mod.rstrip('.').rsplit('.', 1)[-1]

def space_if(p):
	return " " if p else ""
endglobal

snippet qual "Qualified import, name by last module" !b
import qualified ${1:Module} as ${2:`!p snip.rv = last_module(t[1])`}
endsnippet

snippet containers "Import modules for data structures, qualified" !b
import qualified Data.HashMap.Lazy as HashMap
import qualified Data.HashSet      as HashSet
import qualified Data.IntMap       as IntMap
import qualified Data.IntSet       as IntSet
import qualified Data.IxSet        as IxSet
import qualified Data.Map          as Map
import qualified Data.Sequence     as Seq
import qualified Data.Set          as Set
endsnippet

snippet t "Algebraic data type" !b
data ${1:Type} ${2:a}`!p snip.rv = space_if(t[2])`= ${3:Constructor} | ${4:Constructor} ${0:deriving (Eq, Show)}
endsnippet

# }}} Statements

# Definitions {{{

snippet val "Value definition" !b
-- | ${4:Documentation for $1}
$1 :: ${2:Type}
${1:name} = ${5:error "undefined: \`$1' in `!v expand('%')`"}
endsnippet

# }}} Definitions

# Expressions {{{

snippet \ "Lambda" !w
(\\ ${1:args} -> ${2:expression})
endsnippet


# }}} Expressions

# vim: foldmethod=marker

# Pragmas {{{

snippet pragma "Compiler pragma" !b
{-# $1 #-}
endsnippet

snippet lang "LANGUAGE pragma" !b
{-# LANGUAGE $1 #-}
endsnippet

snippet ghcopt "GHC options" !b
{-# OPTIONS_GHC $1 #-}
endsnippet

snippet preproc "Preprocessor" !b
{-# OPTIONS_GHC -F -pgmF ${1:executable} #-}
endsnippet

# }}} Pragmas

# Statements {{{


snippet main "Main module" !b
main :: IO ()
main = ${1:error "undefined: \`main' in `!v expand('%')`"}
endsnippet


snippet as "Qualified import, name by first character of last module" !b
import qualified ${1:Module} as ${2:`!p snip.rv = last_module(t[1])[0]`}
endsnippet

snippet r "Data record" !b
data ${1:Type} = $1
		{ ${3:field} :: ${4:Type}
		} deriving (${5:Classes})
endsnippet

snippet new "Newtype" !b
newtype ${1:Type} ${2:a}`!p snip.rv = space_if(t[2])`= $1 ${3:Oldtype} ${4:deriving (Eq, Show)}
endsnippet

snippet cls "Type class definition" !b
class ${1:Name} where
		$0
endsnippet

snippet in "Instance definition" !b
instance ${1:Class} ${2:Type} where
		$0
endsnippet

# }}} Statements

# Definitions {{{

snippet :: "Type signature" !b
${1:name} :: ${2:Type}
endsnippet

snippet => "Class constraint" !w
${1:Class} ${2:a} => $2
endsnippet


# }}} Definitions

# Expressions {{{

snippet if "Boolean conditional" !w
if ${1:condition} then ${2:true} else ${3:false}
endsnippet

snippet qq "Quasi quote" !w
[${1:quoter}|${2:content}|]
endsnippet

# }}} Expressions
